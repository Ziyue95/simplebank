# Use this workflow to build docker image and later deploy it to production
name: Deploy to production

# only trigger the workflow when there is a push on master branch
on:
  push:
    branches: [ "main" ]

jobs:
  
  # declare to build and push docker image to amazon ECR
  deploy:
    name: Build image
    runs-on: ubuntu-latest

    # steps to perform build job
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.3' # default is latest stable
      id: install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        # TODO: load encrypted AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY as environment variables when the workflow is running;
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # conform with the region in AWS setting
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # retrieve the project credentials from Amazon SecretsManager
    - name: Load secrets and save to app.env
      run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env  

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: simplebank
        IMAGE_TAG: ${{ github.sha }}
      # build the image locally and push the image to ECR
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t latest . 
        docker push -a $REGISTRY/$REPOSITORY

    - name: Deploy image to Amazon EKS
      # deploy multiple resources: 
      # 1. user authorization(aws-auth.yaml); 
      # 2. deployment resource: manage the deployment of our simple-bank API container(deployment.yaml);
      # 3. ...
      run: |
        kubectl apply -f eks/aws-auth.yaml
        kubectl apply -f eks/deployment.yaml
        kubectl apply -f eks/service.yaml
        kubectl apply -f eks/issuer.yaml
        kubectl apply -f eks/ingress.yaml
